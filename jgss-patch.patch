From a9bb93c18e32478be224b2280e44ecc005dece42 Mon Sep 17 00:00:00 2001
From: jesperpedersen <jesper.pedersen@ironjacamar.org>
Date: Tue, 7 Jan 2014 08:33:43 -0500
Subject: [PATCH] [EAP6-36] Add support for GSSCredential

---
 .../jdbc/BaseWrapperManagedConnectionFactory.java  | 54 +++++++++++++++++-
 .../jdbc/local/LocalManagedConnectionFactory.java  | 54 +++++++++++++++---
 .../jdbc/xa/XAManagedConnectionFactory.java        | 66 +++++++++++++++++++---
 3 files changed, 155 insertions(+), 19 deletions(-)

diff --git a/adapters/src/main/java/org/jboss/jca/adapters/jdbc/BaseWrapperManagedConnectionFactory.java b/adapters/src/main/java/org/jboss/jca/adapters/jdbc/BaseWrapperManagedConnectionFactory.java
index c2916c4..df9c989 100644
--- a/adapters/src/main/java/org/jboss/jca/adapters/jdbc/BaseWrapperManagedConnectionFactory.java
+++ b/adapters/src/main/java/org/jboss/jca/adapters/jdbc/BaseWrapperManagedConnectionFactory.java
@@ -59,6 +59,10 @@ import javax.resource.spi.ValidatingManagedConnectionFactory;
 import javax.resource.spi.security.PasswordCredential;
 import javax.security.auth.Subject;
 
+import org.ietf.jgss.GSSCredential;
+import org.ietf.jgss.GSSException;
+import org.ietf.jgss.GSSName;
+import org.ietf.jgss.Oid;
 import org.jboss.logging.Logger;
 
 /**
@@ -1213,10 +1217,10 @@ public abstract class BaseWrapperManagedConnectionFactory
        */
       private Boolean doCheck()
       {
-         Set<PasswordCredential> creds = subject.getPrivateCredentials(PasswordCredential.class);
-         if (creds != null && creds.size() > 0)
+         Set<PasswordCredential> pcCreds = subject.getPrivateCredentials(PasswordCredential.class);
+         if (pcCreds != null && pcCreds.size() > 0)
          {
-            for (PasswordCredential cred : creds)
+            for (PasswordCredential cred : pcCreds)
             {
                if (cred.getManagedConnectionFactory().equals(mcf))
                {
@@ -1251,6 +1255,50 @@ public abstract class BaseWrapperManagedConnectionFactory
                }
             }
          }
+
+         Set<GSSCredential> gssCreds = subject.getPrivateCredentials(GSSCredential.class);
+         if (gssCreds != null && gssCreds.size() > 0)
+         {
+            for (GSSCredential cred : gssCreds)
+            {
+               String user = null;
+               String pass = null;
+
+               if (cri != null)
+               {
+                  WrappedConnectionRequestInfo lcri = (WrappedConnectionRequestInfo)cri;
+                  user = lcri.getUserName();
+                  pass = lcri.getPassword();
+               }
+               else
+               {
+                  try
+                  {
+                     Oid krb5 = new Oid("1.2.840.113554.1.2.2");
+                     GSSName gssName = cred.getName(krb5);
+                     user = gssName.toString();
+                  }
+                  catch (GSSException ge)
+                  {
+                     // Nothing we can do
+                  }
+               }
+
+               if (userName != null)
+               {
+                  user = userName;
+
+                  if (password != null)
+                     pass = password;
+               }
+
+               props.setProperty("user", (user == null) ? "" : user);
+               props.setProperty("password", (pass == null) ? "" : pass);
+               
+               return Boolean.TRUE;
+            }
+         }
+
          return Boolean.FALSE;
       }
 
diff --git a/adapters/src/main/java/org/jboss/jca/adapters/jdbc/local/LocalManagedConnectionFactory.java b/adapters/src/main/java/org/jboss/jca/adapters/jdbc/local/LocalManagedConnectionFactory.java
index 5133d28..f34fa1c 100644
--- a/adapters/src/main/java/org/jboss/jca/adapters/jdbc/local/LocalManagedConnectionFactory.java
+++ b/adapters/src/main/java/org/jboss/jca/adapters/jdbc/local/LocalManagedConnectionFactory.java
@@ -31,6 +31,9 @@ import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Method;
+import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.sql.Connection;
 import java.sql.Driver;
 import java.sql.DriverManager;
@@ -216,13 +219,12 @@ public class LocalManagedConnectionFactory extends BaseWrapperManagedConnectionF
    public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo cri)
       throws ResourceException
    {
-      Properties props = getConnectionProperties(connectionProps, subject, cri);
+      final Properties props = getConnectionProperties(connectionProps, subject, cri);
       // Some friendly drivers (Oracle, you guessed right) modify the props you supply.
       // Since we use our copy to identify compatibility in matchManagedConnection, we need
       // a pristine copy for our own use.  So give the friendly driver a copy.
-      Properties copy = (Properties) props.clone();
-      boolean trace = log.isTraceEnabled();
-      if (trace)
+      final Properties copy = (Properties) props.clone();
+      if (log.isTraceEnabled())
       {
          // Make yet another copy to mask the password
          Properties logCopy = copy;
@@ -237,17 +239,51 @@ public class LocalManagedConnectionFactory extends BaseWrapperManagedConnectionF
       if (getURLDelimiter() != null && !getURLDelimiter().trim().equals("") && urlSelector == null)
          initUrlSelector();
 
-      if (urlSelector != null)
+      if (subject != null)
       {
-         return getHALocalManagedConnection(props, copy);
+         try
+         {
+            return Subject.doAs(subject, new PrivilegedExceptionAction<ManagedConnection>()
+            {
+               public ManagedConnection run() throws ResourceException
+               {
+                  if (urlSelector != null)
+                  {
+                     return getHALocalManagedConnection(props, copy);
+                  }
+                  else
+                  {
+                     return getLocalManagedConnection(props, copy);
+                  }
+               }
+            });
+         }
+         catch (PrivilegedActionException pe)
+         {
+            if (pe.getException() instanceof ResourceException)
+            {
+               throw (ResourceException)pe.getException();
+            }
+            else
+            {
+               throw new ResourceException(pe);
+            }
+         }
       }
       else
       {
-         return getLocalManagedConnection(props, copy);
+         if (urlSelector != null)
+         {
+            return getHALocalManagedConnection(props, copy);
+         }
+         else
+         {
+            return getLocalManagedConnection(props, copy);
+         }
       }
    }
 
-   private LocalManagedConnection getLocalManagedConnection(Properties props, Properties copy)
+   private LocalManagedConnection getLocalManagedConnection(final Properties props, final Properties copy)
       throws ResourceException
    {
       Connection con = null;
@@ -289,7 +325,7 @@ public class LocalManagedConnectionFactory extends BaseWrapperManagedConnectionF
       }
    }
 
-   private LocalManagedConnection getHALocalManagedConnection(Properties props, Properties copy)
+   private LocalManagedConnection getHALocalManagedConnection(final Properties props, final Properties copy)
       throws ResourceException
    {
       boolean trace = log.isTraceEnabled();
diff --git a/adapters/src/main/java/org/jboss/jca/adapters/jdbc/xa/XAManagedConnectionFactory.java b/adapters/src/main/java/org/jboss/jca/adapters/jdbc/xa/XAManagedConnectionFactory.java
index 637ea3f..4344a74 100644
--- a/adapters/src/main/java/org/jboss/jca/adapters/jdbc/xa/XAManagedConnectionFactory.java
+++ b/adapters/src/main/java/org/jboss/jca/adapters/jdbc/xa/XAManagedConnectionFactory.java
@@ -33,6 +33,9 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -387,7 +390,7 @@ public class XAManagedConnectionFactory extends BaseWrapperManagedConnectionFact
    /**
     * {@inheritDoc}
     */
-   public ManagedConnection createManagedConnection(Subject subject, ConnectionRequestInfo cri)
+   public ManagedConnection createManagedConnection(final Subject subject, final ConnectionRequestInfo cri)
       throws javax.resource.ResourceException
    {
       if (urlProperty != null && !urlProperty.trim().equals("") && xadsSelector == null)
@@ -395,7 +398,34 @@ public class XAManagedConnectionFactory extends BaseWrapperManagedConnectionFact
 
       if (xadsSelector == null)
       {
-         return getXAManagedConnection(subject, cri);
+         if (subject != null)
+         {
+            try
+            {
+               return Subject.doAs(subject, new PrivilegedExceptionAction<ManagedConnection>()
+               {
+                  public ManagedConnection run() throws ResourceException
+                  {
+                     return getXAManagedConnection(subject, cri);
+                  }
+               });
+            }
+            catch (PrivilegedActionException pe)
+            {
+               if (pe.getException() instanceof ResourceException)
+               {
+                  throw (ResourceException)pe.getException();
+               }
+               else
+               {
+                  throw new ResourceException(pe);
+               }
+            }
+         }
+         else
+         {
+            return getXAManagedConnection(subject, cri);
+         }
       }
 
       while (xadsSelector.hasMore())
@@ -405,14 +435,36 @@ public class XAManagedConnectionFactory extends BaseWrapperManagedConnectionFact
          if (log.isTraceEnabled())
             log.trace("Trying to create an XA connection to " + xaData.getUrl());
 
-         try
+         if (subject != null)
          {
-            return getXAManagedConnection(subject, cri);
+            try
+            {
+               return Subject.doAs(subject, new PrivilegedExceptionAction<ManagedConnection>()
+               {
+                  public ManagedConnection run() throws ResourceException
+                  {
+                     return getXAManagedConnection(subject, cri);
+                  }
+               });
+            }
+            catch (PrivilegedActionException pe)
+            {
+               log.warn("Failed to create an XA connection to " + xaData.getUrl() + ": " +
+                        pe.getException().getMessage());
+               xadsSelector.fail(xaData);
+            }
          }
-         catch (ResourceException e)
+         else
          {
-            log.warn("Failed to create an XA connection to " + xaData.getUrl() + ": " + e.getMessage());
-            xadsSelector.fail(xaData);
+            try
+            {
+               return getXAManagedConnection(subject, cri);
+            }
+            catch (ResourceException e)
+            {
+               log.warn("Failed to create an XA connection to " + xaData.getUrl() + ": " + e.getMessage());
+               xadsSelector.fail(xaData);
+            }
          }
       }
 
-- 
1.8.1.4

